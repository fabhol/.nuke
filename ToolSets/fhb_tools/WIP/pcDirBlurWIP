set cut_paste_input [stack 0]
version 11.3 v5
push $cut_paste_input
Group {
 name pcDirBlur
 tile_color 0x7f7f7fff
 selected true
 xpos -260
 ypos 325
 addUserKnob {20 DirBlurTab l DirBlur}
 addUserKnob {4 output l mode t "Choose the layers that you want to affect.\n\nRGB: Only affects the RGB layer\n\nRGB + pc_alpha: Affects RGB and the per channel alpha layer. Select this mode, if you want to merge the result over a background.\n\npc_alpha: Only affect the per channel alpha layer. Select this mode if your RGB channels already have chromatic aberration (for example objects from the plate), and you want to merge them on top of a background.\nIn this case the RGB layer should not be premultiplied yet. Tick the 'premult RGB' check box in the pcMerge instead." M {RGB "RGB + pc_alpha" pc_alpha "" "" "" "" ""}}
 addUserKnob {41 alpha_operation l alpha t "There is no way of retaining a correct alpha channel after seperately processing the RGB channels. This lets you generate a new alpha based on the pc_alpha layer.\n\n<b>original</b>: the original alpha is piped through\n<b>average</b>/<b>max</b>/<b>min</b>: average/max/min of the three pc_alpha channels\n<b>luminance</b>: luminance of the pc_alpha using the Rec. 709 luma coefficients" -STARTLINE T GenerateAlpha.operation}
 addUserKnob {6 show_vectors l "show vectors" +STARTLINE}
 show_vectors true
 addUserKnob {3 res -STARTLINE}
 res 20
 addUserKnob {26 divider01 l " "}
 addUserKnob {7 angle1 l angle R -180 180}
 angle1 -123
 addUserKnob {7 angle2 l angle R -180 180}
 angle2 {{"atan2((p2.y-p1.y), (p2.x*pixel_aspect-p1.x*pixel_aspect)) * 180 / PI"}}
 addUserKnob {6 use_points l "use points to calculate angle automatically" +STARTLINE}
 use_points true
 addUserKnob {12 p1}
 p1 {614 534}
 addUserKnob {12 p2}
 p2 {363 147}
 addUserKnob {18 scale R 0 10}
 scale 30
 addUserKnob {6 scale_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 scale_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {18 offset R -0.5 0.5}
 offset {0 0 0}
 addUserKnob {6 offset_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 offset_panelDropped_1 l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {41 method t "<i>backward</i> A much faster algorithm, that only seems to struggle with high scale values. Switch to <i>forward</i> if you encounter any issues." T VectorBlur1.method}
 addUserKnob {26 _1 l "" +STARTLINE}
 addUserKnob {41 from0 l "effect mask" T Copy3.from0}
 addUserKnob {6 invert_effect_mask l invert -STARTLINE}
 addUserKnob {26 "" l mask T ""}
 addUserKnob {41 maskChannelMask l "" -STARTLINE T Dissolve1.maskChannelMask}
 addUserKnob {41 inject -STARTLINE T Dissolve1.inject}
 addUserKnob {41 invert_mask l invert -STARTLINE T Dissolve1.invert_mask}
 addUserKnob {41 fringe -STARTLINE T Dissolve1.fringe}
 addUserKnob {41 mix T Dissolve1.which}
 addUserKnob {20 Info_tab l Info}
 addUserKnob {26 dasname l "" +STARTLINE T "per channel<br><font size='5'>DirBlur</font> v1.03<br>"}
 addUserKnob {26 what l "" +STARTLINE T "pcDirBlur is part of the pc toolset, a collection of nodes that offer the\npossibility to affect the channels seperately. Chain them up in any\nway to achieve the desired effect.\n\nAn optional per channel alpha layer (pc_alpha) can be created to cor-\nrectly merge the result over a background. In this case it's necessary\nto use the pcMerge instead of a regular Merge."}
 addUserKnob {26 divider l "" +STARTLINE}
 addUserKnob {26 info l "" +STARTLINE T "Last change: 2020-01-16\n"}
 addUserKnob {26 name_1 l "" +STARTLINE T "\nFabian Holtz"}
 addUserKnob {26 mail l "" +STARTLINE T "<a href=\"mailto:holtzf+nuke@gmail.com\"><span style=\"color:#C8C8C8;\">holtzf+nuke@gmail.com</a>"}
}
 Input {
  inputs 0
  name mask
  xpos -1800
  ypos 873
  number 1
 }
 Dot {
  name Dot1
  xpos -1766
  ypos 954
 }
 Input {
  inputs 0
  name effect_mask
  xpos -700
  ypos -15
  number 2
 }
 Dot {
  name Dot14
  xpos -666
  ypos 42
 }
set Nea9d130 [stack 0]
push $Nea9d130
 Copy {
  inputs 2
  to0 rgba.red
  from1 {{{from0}}}
  to1 rgba.green
  name Copy3
  xpos -700
  ypos 75
 }
 Invert {
  channels {rgba.red rgba.green -rgba.blue none}
  name Invert1
  xpos -700
  ypos 158
  disable {{!parent.invert_effect_mask}}
 }
 Dot {
  name Dot13
  xpos -666
  ypos 210
 }
 Input {
  inputs 0
  name Input
  xpos -1580
  ypos -495
 }
set Neac0150 [stack 0]
 Dot {
  name Dot3
  xpos -1546
  ypos -366
 }
set Neac4c10 [stack 0]
 Dot {
  name Dot17
  xpos -1106
  ypos -366
 }
set Neac97d0 [stack 0]
 Dot {
  name Dot16
  xpos -996
  ypos -366
 }
 Expression {
  temp_name0 resx
  temp_expr0 width/res
  temp_name1 resy
  temp_expr1 height/ceil(res/width*height/pixel_aspect)
  channel0 none
  channel1 none
  channel2 none
  expr3 (1-clamp(floor((x+resx/2)%resx)))*(1-clamp(floor((y+resy/2)%resy)))*10
  name Expression3
  xpos -1030
  ypos -322
  addUserKnob {20 User}
  addUserKnob {3 res}
  res {{max(parent.res,1)}}
 }
 Shuffle {
  red alpha
  green alpha
  blue alpha
  name Shuffle4
  xpos -1030
  ypos -274
 }
 Dot {
  name Dot15
  xpos -996
  ypos -222
 }
push $Neac97d0
 Merge2 {
  inputs 2
  name Merge2
  xpos -1140
  ypos -226
  disable {{!parent.show_vectors}}
 }
 Dot {
  name Dot2
  xpos -1106
  ypos -150
 }
add_layer {pc_alpha pc_alpha.red pc_alpha.green pc_alpha.blue}
 Shuffle {
  red alpha
  green alpha
  blue alpha
  out pc_alpha
  name Shuffle1
  xpos -1140
  ypos -106
  disable {{"\[string first \"pc_alpha\" \[layers \[input this 0]]]>-1"}}
 }
 Dot {
  name Dot5
  xpos -1106
  ypos -6
 }
set Neb1c260 [stack 0]
 Dot {
  name Dot11
  xpos -886
  ypos -6
 }
 Crop {
  box {{floor(bbox.x-abs(helper.x)*.5+helper.x*parent.offset)} {floor(bbox.y-abs(helper.y)*.5+helper.y*parent.offset)} {ceil(bbox.r+abs(helper.x)*.5+helper.x*parent.offset)} {ceil(bbox.t+abs(helper.y)*.5+helper.y*parent.offset)}}
  name Crop1
  xpos -920
  ypos 63
  addUserKnob {20 User}
  addUserKnob {12 helper}
  helper {{cos(radians(parent.use_points?parent.angle2:parent.angle1))*parent.scale} {sin(radians(parent.use_points?parent.angle2:parent.angle1))*parent.scale}}
 }
 Expression {
  expr0 1
  expr1 0
  expr2 0
  name Expression1
  xpos -920
  ypos 102
 }
 ColorMatrix {
  matrix {
      {{cos(radians(rotate))} {-sin(radians(rotate))} 0}
      {{sin(radians(rotate))} {cos(radians(rotate))} 0}
      {0 0 1}
    }
  name ColorMatrix1
  label "Rotate vectors"
  selected true
  xpos -920
  ypos 129
  addUserKnob {20 User}
  addUserKnob {7 rotate R -180 180}
  rotate {{parent.use_points?parent.angle2:parent.angle1}}
 }
 Merge2 {
  inputs 2
  operation multiply
  Achannels {rgba.red rgba.green -rgba.blue none}
  Bchannels {rgba.red rgba.green -rgba.blue none}
  output {rgba.red rgba.green -rgba.blue none}
  name Merge1
  xpos -920
  ypos 206
  disable {{Copy3.from0==0}}
 }
 Dot {
  name Dot12
  xpos -886
  ypos 258
 }
push $Neb1c260
 Copy {
  inputs 2
  from0 rgba.red
  to0 forward.u
  from1 rgba.green
  to1 forward.v
  name Copy4
  xpos -1140
  ypos 245
 }
 VectorBlur {
  channels {rgba.red -rgba.green -rgba.blue pc_alpha.red}
  uv forward
  scale {{parent.scale.r}}
  offset {{parent.offset.r-.5}}
  name VectorBlur1
  xpos -1140
  ypos 393
 }
 VectorBlur {
  channels {-rgba.red rgba.green -rgba.blue pc_alpha.green}
  uv forward
  scale {{parent.scale.g}}
  offset {{parent.offset.g-.5}}
  method {{VectorBlur1.method}}
  name VectorBlur2
  xpos -1140
  ypos 441
 }
 VectorBlur {
  channels {-rgba.red -rgba.green rgba.blue pc_alpha.blue}
  uv forward
  scale {{parent.scale.b}}
  offset {{parent.offset.b-.5}}
  method {{VectorBlur1.method}}
  name VectorBlur3
  xpos -1140
  ypos 489
 }
 Dot {
  name Dot9
  xpos -1106
  ypos 666
 }
set Neb9db00 [stack 0]
 Dot {
  name Dot8
  xpos -1106
  ypos 762
 }
set Neba2650 [stack 0]
 Group {
  name GenerateAlpha
  tile_color 0x7f7f7fff
  xpos -1140
  ypos 854
  addUserKnob {20 GenerateAlpha_tab l GenerateAlpha}
  addUserKnob {4 operation M {original average luminance max min "" "" "" ""}}
  operation average
 }
  Input {
   inputs 0
   name Input
   xpos -40
   ypos 14
  }
  Dot {
   name Dot1
   xpos -6
   ypos 114
  }
set Nebb4d60 [stack 0]
  Expression {
   expr3 min(pc_alpha.red,pc_alpha.green,pc_alpha.blue)
   name min
   xpos 180
   ypos 206
  }
push $Nebb4d60
  Expression {
   expr3 max(pc_alpha.red,pc_alpha.green,pc_alpha.blue)
   name max
   xpos 70
   ypos 206
  }
push $Nebb4d60
  Expression {
   expr3 pc_alpha.red*0.2126+pc_alpha.green*0.7152+pc_alpha.blue*0.0722
   name luminance
   xpos -40
   ypos 206
  }
push $Nebb4d60
  Expression {
   expr3 (pc_alpha.red+pc_alpha.green+pc_alpha.blue)/3
   name average
   xpos -150
   ypos 206
  }
push $Nebb4d60
  Dot {
   name Dot2
   xpos -226
   ypos 210
  }
  Switch {
   inputs 5
   which {{parent.operation}}
   name Switch1
   xpos -40
   ypos 302
  }
  Output {
   name Output1
   xpos -40
   ypos 398
  }
 end_group
push $Neba2650
push $Neb9db00
push $Neb1c260
push $Neac4c10
 Copy {
  inputs 2
  channels pc_alpha
  name Copy10
  xpos -1580
  ypos -21
  disable {{"parent.output==0 || Dissolve1.which<=0"}}
 }
 Dot {
  name Dot6
  xpos -1546
  ypos 570
 }
set Nec10cc0 [stack 0]
 Dot {
  name Dot7
  xpos -1326
  ypos 570
 }
 Copy {
  inputs 2
  channels rgb
  name Copy1
  xpos -1360
  ypos 651
  disable {{parent.output==2}}
 }
 Copy {
  inputs 2
  channels pc_alpha
  name Copy6
  xpos -1360
  ypos 747
  disable {{parent.output==0}}
 }
 Copy {
  inputs 2
  from0 rgba.alpha
  to0 rgba.alpha
  name Copy11
  xpos -1360
  ypos 849
  disable {{GenerateAlpha.operation==0}}
 }
 Dot {
  name Dot10
  xpos -1326
  ypos 954
 }
push $Nec10cc0
 Dissolve {
  inputs 2+1
  which 1
  maskChannelMask none
  name Dissolve1
  xpos -1580
  ypos 945
  disable {{"(!\[exists parent.input0.name]) && (Merge2.disable)"}}
 }
 Output {
  name Output1
  xpos -1580
  ypos 1070
 }
push $Neac0150
push $Neac0150
push $Neac0150
 Remove {
  name Remove1
  xpos -1320
  ypos -489
 }
 ShuffleCopy {
  inputs 2
  in2 none
  red red
  green green
  blue blue
  name ShuffleCopy1
  label "\[value in] -> \[value out]"
  xpos -1320
  ypos -440
 }
 Copy {
  inputs 2
  channels pc_alpha
  name Copy5
  xpos -1320
  ypos -397
 }
end_group
